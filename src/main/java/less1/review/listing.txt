interface Moveable{
	void move();                                  //Данные два интерфейса лучще записать в один, так как они отвечают за смежный функционал
}

interface Stopable{
	void stop();
}


abstract class Car{

	public Engine engine;                   //Нет смысла делать геттеры и сеттеры для открытого поля. Лучще сделать его приватным
	//private Engine engine;
	private String color;
	private String name;


	protected void start(){               //Возможно не стоит делать метод protected так как наследники могут быть в другом пакете.
		System.out.println("Car starting");
	}

	abstract void open();


	public Engine getEngine(){
		return engine;
	}

	public void setEngine(Engine engine){     //В целом использование геттеров и сеттеров здесь не выглядит как что то удобное. Возможно
		this.engine=engine;                   // все-таки здесь стоит сделать поля родителя не приватными.
	}

	public String getColor(){
		return color;
	}

	public void setColor(String color){
		this.color=color;
	}

	public String getName(){
		return name;
	}

	public void setName(String name){
		this.name=name;
	}

}

class LightWeightCar extends Car implements Moveable{ //Если предположить что интерфейсы были все же объеденены метод stop() тоже следует описать

	@Override
	void open(){
		System.out.println("Car is open");
	}

	@Override
	public void move(){
		System.out.println("Car is moving");
	}

	/*@Override
	public void stop(){
		System.out.println("Car is stoping");
	}*/
}


class Lorry extends Car,Moveable,Stopable{  //Для интерфейсов следует добавить ключевое слово implements
//class Lorry extends Car implements Moveable,Stopable{
	public void move(){
		System.out.println("Car is moving");
	}
	public void stop(){
		System.out.println("Car is stop");
	}
}
